# Official Scala runtime
FROM openjdk:17-jdk-slim

# Working directory inside the container
WORKDIR /app_scala

# Install dependencies needed for sbt installation
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        wget=1.21-1+deb11u1 \
        gnupg2=2.2.27-2+deb11u2 \
        curl=7.74.0-1.3+deb11u14 && \
    rm -rf /var/lib/apt/lists/*

# Ensures that if any part of the piped command fails, the entire command will fail, making error detection more reliable
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Install sbt
RUN echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | tee /etc/apt/sources.list.d/sbt.list && \
    echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee /etc/apt/sources.list.d/sbt_old.list && \
    curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | gpg --dearmor | tee /etc/apt/trusted.gpg.d/sbt.gpg > /dev/null && \
    apt-get update && \
    apt-get install -y --no-install-recommends sbt=1.5.5

# Create a non-root user
RUN useradd -m scala_user
# RUN useradd -m scala_user && \
#     mkdir -p /app_scala/data && \
#     chown scala_user:scala_user /app_scala/data && \
#     chmod 755 /app_scala/data

# Copy project files
COPY time_application_project/build.sbt ./
COPY time_application_project/project/ ./project/

# Download dependencies (without copying source code)
RUN sbt update

# Copy the source code of the application as the non-root user
COPY --chown=scala_user:scala_user time_application_project/src ./src

# Assembly (build) the application as the non-root user
RUN sbt assembly

# Switch to the non-root user
RUN chown -R scala_user:scala_user /app_scala
USER scala_user

# Expose the port for the app
EXPOSE 9090

# Java environment variable
ENV JAVA_OPTS=""

# Run the application using the fat JAR generated by sbt-assembly as the non-root user
CMD ["java", "-jar", "target/scala-2.13/MoscowTimeApp-assembly-0.1.jar"]
