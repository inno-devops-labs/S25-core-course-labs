# Default values for app-python.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: kurkune/app_python
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

# Secret values
password: "my-password"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "internal-app"

podAnnotations:
  vault.hashicorp.com/agent-inject: 'true'
  vault.hashicorp.com/role: 'internal-app'
  vault.hashicorp.com/agent-inject-secret-database-config.txt: 'internal/data/database/config'
  vault.hashicorp.com/agent-inject-status: 'update'
  vault.hashicorp.com/agent-inject-template-database-config.txt: |
    {{- with secret "internal/data/database/config" -}}
    postgresql://{{ .Data.data.username }}:{{ .Data.data.password }}@postgres:5432/wizard
    {{- end -}}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

# StatefulSet configuration
statefulset:
  # Storage class to use for the persistent volume claims
  storageClassName: "standard"
  # Storage size for each persistent volume claim
  storage: "1Gi"
  # Pod management policy - can be "OrderedReady" or "Parallel"
  podManagementPolicy: "Parallel"
  # Update strategy
  updateStrategy:
    # Can be "RollingUpdate" or "OnDelete"
    type: "RollingUpdate"
    rollingUpdate:
      # Partition indicates the ordinal at which the StatefulSet should be partitioned
      # for updates. Default value is 0.
      partition: 0

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 1
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 30Mi

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
- name: config-volume
  configMap:
    name: config
    items:
    - key: config
      path: config.json

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
- name: config-volume
  mountPath: "/config"
  readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}