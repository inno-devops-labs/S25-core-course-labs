apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "moscow-time.fullname" . }}
  labels:
    {{- include "moscow-time.labels" . | nindent 4 }}
data:
  config.json: |-
    {
      "app_name": "Moscow Time API",
      "version": "1.2.0",
      "description": "API that shows the current time in Moscow with visit tracking",
      "logging": {
        "level": "INFO",
        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
      },
      "features": {
        "visits_tracking": true,
        "metrics_enabled": true,
        "response_time_tracking": true
      },
      "timeouts": {
        "read_timeout": 5,
        "connect_timeout": 3
      }
    }
  app.py: |-
    from fastapi import FastAPI
    from datetime import datetime
    import pytz
    import os

    app = FastAPI()

    # File to store visit count
    VISITS_FILE = os.environ.get("VISITS_FILE", "visits")

    def get_visit_count():
        """Get the current visit count from the file."""
        try:
            if os.path.exists(VISITS_FILE):
                with open(VISITS_FILE, "r") as f:
                    return int(f.read().strip() or "0")
            return 0
        except Exception as e:
            print(f"Error reading visit count: {e}")
            return 0

    def save_visit_count(count):
        """Save the visit count to the file."""
        try:
            with open(VISITS_FILE, "w") as f:
                f.write(str(count))
        except Exception as e:
            print(f"Error saving visit count: {e}")

    @app.get("/time")
    def get_time():
        # Increment visit counter
        count = get_visit_count() + 1
        save_visit_count(count)
        
        moscow_tz = pytz.timezone("Europe/Moscow")
        moscow_time = datetime.now(moscow_tz)
        return {"time": moscow_time.strftime("%H:%M:%S")}

    @app.get("/visits")
    def get_visits():
        """Return the current visit count."""
        count = get_visit_count()
        return {"visits": count}

    if __name__ == "__main__":
        import uvicorn
        uvicorn.run(app, host="0.0.0.0", port=8000)

  visit_tracker.py: |-
    import os
    
    # File to store visit count
    VISITS_FILE = os.environ.get("VISITS_FILE", "/app/visits-data/visits")

    def get_visit_count():
        """Get the current visit count from the file."""
        try:
            if os.path.exists(VISITS_FILE):
                with open(VISITS_FILE, "r") as f:
                    content = f.read().strip()
                    return int(content or "0")
            return 0
        except Exception as e:
            print(f"Error reading visit count: {e}")
            return 0

    def save_visit_count(count):
        """Save the visit count to the file."""
        try:
            with open(VISITS_FILE, "w") as f:
                f.write(str(count))
        except Exception as e:
            print(f"Error saving visit count: {e}")

    def track_visit():
        """Track a visit and return the new count."""
        count = get_visit_count() + 1
        save_visit_count(count)
        return count

  entrypoint.py: |-
    import os
    import sys
    import importlib.util

    # Import the visit tracker module
    spec = importlib.util.spec_from_file_location("visit_tracker", "/config/visit_tracker.py")
    visit_tracker = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(visit_tracker)

    # Import the original app
    sys.path.append('/app')
    from app import app

    # Add the visits endpoint
    from fastapi import FastAPI
    
    @app.get("/visits")
    def get_visits():
        """Return the current visit count."""
        count = visit_tracker.get_visit_count()
        return {"visits": count}
    
    # Override the time endpoint to track visits
    original_get_time = None
    for route in app.routes:
        if getattr(route, "path", None) == "/time" and route.methods == {"GET"}:
            original_get_time = route.endpoint
            break
    
    if original_get_time:
        @app.get("/time")
        def get_time():
            # Track the visit
            visit_tracker.track_visit()
            # Call the original endpoint
            return original_get_time()
    
    # Start the app
    if __name__ == "__main__":
        import uvicorn
        uvicorn.run(app, host="0.0.0.0", port=8000) 