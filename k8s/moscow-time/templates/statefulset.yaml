apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "moscow-time.fullname" . }}
  labels:
    {{- include "moscow-time.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  serviceName: {{ include "moscow-time.fullname" . }}-headless
  selector:
    matchLabels:
      {{- include "moscow-time.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "moscow-time.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "moscow-time.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: /app
          command: 
            - "sh"
            - "-c"
            - |
              mkdir -p /app/visits-data
              touch /app/visits-data/visits
              python /config/entrypoint.py
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /time
              port: http
            initialDelaySeconds: {{ .Values.probes.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /time
              port: http
            initialDelaySeconds: {{ .Values.probes.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /app/visits-data
            - name: app-config
              mountPath: /config
          {{- if .Values.configMap.enabled }}
            - name: config
              mountPath: {{ .Values.configMap.mountPath }}
          {{- end }}
          {{- if .Values.secrets.enabled }}
            - name: secrets
              mountPath: {{ .Values.secrets.mountPath }}
          {{- end }}
          env:
            - name: VISITS_FILE
              value: "/app/visits-data/visits"
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: app-config
          configMap:
            name: {{ include "moscow-time.fullname" . }}
      {{- if .Values.configMap.enabled }}
        - name: config
          configMap:
            name: {{ include "moscow-time.fullname" . }}
      {{- end }}
      {{- if .Values.secrets.enabled }}
        - name: secrets
          secret:
            secretName: {{ include "moscow-time.fullname" . }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.persistence.storageClassName | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
  {{- if .Values.parallelPodManagement }}
  podManagementPolicy: "Parallel"
  {{- else }}
  podManagementPolicy: "OrderedReady"
  {{- end }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if eq .Values.updateStrategy.type "RollingUpdate" }}
    rollingUpdate:
      partition: {{ .Values.updateStrategy.rollingUpdate.partition }}
    {{- end }} 