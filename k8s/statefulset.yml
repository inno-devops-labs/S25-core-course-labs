apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: app-python
  labels:
    app: app-python
spec:
  podManagementPolicy: Parallel  # Enables parallel pod creation/termination
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0              # Updates all pods in parallel if needed
  serviceName: "app-python"
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: app-python
  template:
    metadata:
      labels:
        app: app-python
      annotations: {{ toYaml .Values.podAnnotations | indent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name | default "internal-app" }}
      containers:
        - name: app-python
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          volumeMounts:
            - name: app-storage
              mountPath: /data
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
  volumeClaimTemplates:
    - metadata:
        name: app-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.storage.size }}
