Index: lab4.md
===================================================================
diff --git a/lab4.md b/lab4.md
deleted file mode 100644
--- a/lab4.md	(revision 55e59c47424c43fc926e9eef54257618362654da)
+++ /dev/null	(revision 55e59c47424c43fc926e9eef54257618362654da)
@@ -1,84 +0,0 @@
-# Lab 4: Infrastructure as Code Lab
-
-## Overview
-
-In this lab assignment, you will explore Infrastructure as Code (IAC) using Terraform. You'll build Docker and AWS infrastructures and dive into managing GitHub repositories through Terraform. Additionally, there are bonus tasks to enhance your Terraform skills. Follow the tasks below to complete the lab assignment.
-
-## Task 1: Introduction to Terraform
-
-**6 Points:**
-
-0. You will need a VPN tool for this lab
-
-1. Get Familiar with Terraform:
-   - Begin by familiarizing yourself with Terraform by reading the [introduction](https://www.terraform.io/intro/index.html) and exploring [best practices](https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html).
-
-2. Set Up Terraform Workspace:
-   - Create a `terraform` folder to organize your Terraform workspaces.
-   - Inside the `terraform` folder, create a file named `TF.md`.
-
-3. Docker Infrastructure Using Terraform:
-   - Follow the [Docker tutorial](https://learn.hashicorp.com/collections/terraform/docker-get-started) for building a Docker infrastructure with Terraform.
-   - Perform the following tasks as instructed in the tutorial:
-      - Install Terraform.
-      - Build the Infrastructure.
-      - Provide the output of the following commands in the `TF.md` file:
-
-        ```sh
-            terraform state show
-            terraform state list
-        ```
-
-      - Document a part of the log with the applied changes.
-      - Utilize input variables to rename your Docker container.
-      - Finish the tutorial and provide the output of the `terraform output` command in the `TF.md` file.
-
-4. Yandex Cloud Infrastracture Using Terraform:
-   - Create an account on [Yandex Cloud](https://cloud.yandex.com/).
-   - Check for available free-tier options and select a free VM instance suitable for this lab.
-   - Follow the [Yandex Quickstart Guide](https://yandex.cloud/en-ru/docs/tutorials/infrastructure-management/terraform-quickstart#linux_1) to set up and configure Terraform for managing Yandex Cloud resources.
-   - Document the entire process, including setup steps, configurations, and any challenges encountered, in the `TF.md` file.
-
-5. [Optioinal] AWS Infrastructure Using Terraform:
-   - Follow the [AWS tutorial](https://learn.hashicorp.com/tutorials/terraform/aws-build?in=terraform/aws-get-started) alongside the instructions from the previous step.
-
-## Task 2: Terraform for GitHub
-
-**4 Points:**
-
-1. GitHub Infrastructure Using Terraform:
-   - Utilize the [GitHub provider for Terraform](https://registry.terraform.io/providers/integrations/github/latest/docs).
-   - Create a directory inside the `terraform` folder specifically for managing your GitHub project infrastructure.
-   - Build GitHub infrastructure following a reference like [this example](https://dev.to/pwd9000/manage-and-maintain-github-with-terraform-2k86). Prepare `.tf` files that include:
-      - Repository name
-      - Repository description
-      - Visibility settings
-      - Default branch
-      - Branch protection rule for the default branch
-   - Avoid placing your token as a variable in the code; instead, use an environment variable.
-
-2. Import Existing Repository:
-   - Use the `terraform import` command to import your current GitHub repository into your Terraform configuration. No need to create a new one. Example: `terraform import "github_repository.core-course-labs" "core-course-labs"`.
-
-3. Apply Terraform Changes:
-   - Apply changes from your Terraform configuration to your GitHub repository.
-
-4. Document Best Practices:
-   - Provide Terraform-related best practices that you applied in the `TF.md` file.
-
-## Bonus Task: Adding Teams
-
-**2.5 Points:**
-
-1. GitHub Teams Using Terraform:
-   - You need to upgrade your account to organization.
-   - Extend your Terraform configuration to add several teams to your GitHub repository, each with different levels of access.
-   - Apply the changes and ensure they take effect in your GitHub repository.
-
-### Guidelines
-
-- Use proper Markdown formatting and structure for documentation files.
-- Organize files within the lab folder with suitable naming conventions.
-- Create pull requests (PRs) as needed: from your fork to the main branch of this repository, and from your fork's branch to your fork's master branch.
-
-> Note: Dive into Terraform to manage infrastructures efficiently. Explore the AWS and Docker tutorials, and don't forget to document your process and best practices in the `TF.md` file.
Index: lab3.md
===================================================================
diff --git a/lab3.md b/lab3.md
deleted file mode 100644
--- a/lab3.md	(revision 55e59c47424c43fc926e9eef54257618362654da)
+++ /dev/null	(revision 55e59c47424c43fc926e9eef54257618362654da)
@@ -1,53 +0,0 @@
-# Lab 3: Continuous Integration Lab
-
-## Overview
-
-In this lab assignment, you will delve into continuous integration (CI) practices by focusing on code testing, setting up Git Actions CI, and optimizing workflows. Additionally, you will have the opportunity to explore bonus tasks to enhance your CI knowledge. Follow the tasks below to complete the lab assignment.
-
-## Task 1: Code Testing and Git Actions CI
-
-**6 Points:**
-
-1. Code Testing:
-   - Begin by researching and implementing best practices for code testing.
-   - Write comprehensive unit tests for your application.
-   - In the `PYTHON.md` file, describe the unit tests you've created and the best practices you applied.
-   - Enhance the `README.md` file by adding a "Unit Tests" section.
-
-2. Set Up Git Actions CI:
-   - Create a CI workflow using GitHub Actions to build and test your Python project. Refer to the [official GitHub Actions documentation](https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python) for guidance.
-   - Ensure your CI workflow includes at least three essential steps: Dependencies, Linter, and Tests.
-   - Integrate Docker-related steps into your CI workflow, at least two steps Login, Build & Push. You can refer to the [Docker GitHub Actions documentation](https://docs.docker.com/ci-cd/github-actions/) for assistance.
-   - Update the `README.md` file to provide information about your CI workflow.
-
-## Task 2: CI Workflow Improvements
-
-**4 Points:**
-
-1. Workflow Enhancements:
-   - Add a workflow status badge to your repository for visibility.
-   - Dive into best practices for CI workflows and apply them to optimize your existing workflow.
-   - Utilize build cache to enhance workflow efficiency.
-   - Create a `CI.md` file and document the best practices you've implemented.
-
-2. Implement Snyk Vulnerability Checks:
-   - Integrate Snyk into your CI workflow to identify and address vulnerabilities in your projects. You can refer to the [Python example](https://github.com/snyk/actions/tree/master/python-3.8) for guidance, check [another option](https://docs.snyk.io/integrations/snyk-ci-cd-integrations/github-actions-integration#use-your-own-development-environment) how to install dependencies if you face any issue.
-
-## Bonus Task
-
-**2.5 Points:**
-
-1. Follow the Main Task Steps:
-   - Apply the same steps as in the primary CI task to set up CI workflows for an extra application. You can find useful examples in the [GitHub Actions starter workflows](https://github.com/actions/starter-workflows/tree/main/ci).
-
-2. CI Workflow Improvements:
-   1. Python App CI: Configure the CI workflow to run only when changes occur in the `app_python` folder.
-   2. Extra Language App CI: Configure the CI workflow to run only when changes occur in the `app_<language>` folder.
-
-### Guidelines
-
-- Use proper Markdown formatting and structure for all documentation files.
-- Organize files within the lab folder with suitable naming conventions.
-- Create pull requests (PRs) as needed: from your fork to the main branch of this repository, and from your fork's branch to your fork's master branch.
-
-> Note: Implement CI best practices, optimize your workflows, and explore bonus tasks to deepen your understanding of continuous integration.
Index: README.md
===================================================================
diff --git a/README.md b/README.md
deleted file mode 100644
--- a/README.md	(revision 55e59c47424c43fc926e9eef54257618362654da)
+++ /dev/null	(revision 55e59c47424c43fc926e9eef54257618362654da)
@@ -1,62 +0,0 @@
-# DevOps Engineering Labs
-
-## Introduction
-
-Welcome to the DevOps Engineering course labs! These hands-on labs are designed to guide you through various aspects of DevOps practices and principles. As you progress through the labs, you'll gain practical experience in application development, containerization, testing, infrastructure setup, CI/CD processes, and more.
-
-## Architecture
-
-This repository has a master branch containing an introduction. Each new lab assignment will be added as a markdown file with a lab number.
-
-## Rules
-
-To successfully complete the labs and pass the course, follow these rules:
-
-1. **Lab Dependency:** Complete the labs in order; each lab builds upon the previous one.
-2. **Submission and Grading:** Submit your solutions as pull requests (PRs) to the master branch of this repository. You need at least 6/10 points for each lab to pass.
-3. **Fork Repository:** Fork this repository to your workspace to create your own version for solving the labs.
-4. **Recommended Workflow:** Build your solutions incrementally. Complete lab N based on lab N-1.
-5. **PR Creation:** Create a PR from your fork to the master branch of this repository and from your fork's branch to your fork's master branch.
-6. **Wait for Grade:** Once your PR is created, wait for your lab to be reviewed and graded.
-
-### Example for the first lab
-
-1. Fork this repository.
-2. Checkout to the lab1 branch.
-3. Complete the lab1 tasks.
-4. Push the code to your repository.
-5. Create a PR to the master branch of this repository from your fork's lab1 branch.
-6. Create a PR to the master branch of your repository from your lab1 branch.
-7. Wait for your grade.
-
-## Grading and Grades Distribution
-
-Your final grade will be determined based on labs and a final exam:
-
-- Labs: 70% of your final grade.
-- Final Exam: 30% of your final grade.
-
-Grade ranges:
-
-- [90-100] - A
-- [75-90) - B
-- [60-75) - C
-- [0-60) - D
-
-### Labs Grading
-
-Each lab is worth 10 points. Completing main tasks correctly earns you 10 points. Completing bonus tasks correctly adds 2.5 points. You can earn a maximum of 12.5 points per lab by completing all main and bonus tasks.
-
-Finishing all bonus tasks lets you skip the exam and grants you 5 extra points. Incomplete bonus tasks require you to take the exam, which could save you from failing it.
-
->The labs account for 70% of your final grade. With 14 labs in total, each lab contributes 5% to your final grade. Completing all main tasks in a lab earns you the maximum 10 points, which corresponds to 5% of your final grade.
->If you successfully complete all bonus tasks, you'll earn an additional 2.5 points, totaling 12.5 points for that lab, or 6.25% of your final grade. Over the course of all 14 labs, the cumulative points from bonus tasks add up to 87.5% of your final grade.
->Additionally, a 5% bonus is granted for successfully finishing all bonus tasks, ensuring that if you successfully complete everything, your final grade will be 92.5%, which corresponds to an A grade.
-
-## Deadlines and Labs Distribution
-
-Each week, two new labs will be available. You'll have one week to submit your solutions. Refer to Moodle for presentation slides and deadlines.
-
-## Submission Policy
-
-Submitting your lab results on time is crucial for your grading. Late submissions receive a maximum score of 6 points for the corresponding lab. Remember, completing all labs is necessary to successfully pass the course.
Index: lab1.md
===================================================================
diff --git a/lab1.md b/lab1.md
deleted file mode 100644
--- a/lab1.md	(revision 55e59c47424c43fc926e9eef54257618362654da)
+++ /dev/null	(revision 55e59c47424c43fc926e9eef54257618362654da)
@@ -1,65 +0,0 @@
-# Lab 1: Web Application Development
-
-## Overview
-
-In this lab assignment, you will develop a simple web application using Python and best practices. You will also have the opportunity to create a bonus web application using a different programming language. Follow the tasks below to complete the lab assignment.
-
-## Task 1: Python Web Application
-
-**6 Points:**
-
-1. Create `app_python` Folder:
-   - Create a folder named `app_python` to contain your Python web application files.
-   - Inside the `app_python` folder, create a file named `PYTHON.md`.
-
-2. Develop and Test Python Web Application:
-   - Develop a Python web application that displays the current time in Moscow.
-   - Choose a suitable framework for your web application and justify your choice in the `PYTHON.md` file.
-   - Implement best practices in your code and follow coding standards.
-   - Test your application to ensure the displayed time updates upon page refreshing.
-
-## Task 2: Well Decorated Description
-
-**4 Points:**
-
-1. Update `PYTHON.md`:
-   - Describe best practices applied in the web application.
-   - Explain how you followed coding standards, implemented testing, and ensured code quality.
-
-2. Create `README.md` in `app_python` folder:
-   - Use a Markdown template to document the Python web application.
-
-3. Ensure:
-   - Maintain a clean `.gitignore` file.
-   - Use a concise `requirements.txt` file for required dependencies.
-
-### List of Requirements
-
-- MSK Time timezone set up
-- 2 PRs created
-- README includes Overview
-- Nice Markdown decoration
-- Local installation details in README
-
-## Bonus Task: Additional Web Application
-
-**2.5 Points:**
-
-1. Create `app_*` Folder:
-   - Create a folder named `app_*` in the main project directory, replacing `*` with a programming language of your choice (other than Python).
-   - Inside the `app_*` folder, create a file named `*`.md.
-
-2. Develop Your Own Web App:
-   - Create a web application using the programming language you chose.
-   - Decide what your web application will display or do, and use your creativity.
-
-3. Follow Main Task Steps:
-   - Implement your bonus web application following the same suggestions and steps as the main Python web application task.
-
-### Guidelines
-
-- Use proper Markdown formatting and structure for the documentation files. We will use [online one](https://dlaa.me/markdownlint/) to check your `.md` files.
-- Organize the files within the lab folder using appropriate naming conventions.
-- Create a PR from your fork to the master branch of this repository and from your fork's branch to your fork's master branch with your completed lab assignment.
-
-> Note: Apply best practices, coding standards, and testing to your Python web application. Explore creativity in your bonus web application, and document your process using Markdown.
Index: lab2.md
===================================================================
diff --git a/lab2.md b/lab2.md
deleted file mode 100644
--- a/lab2.md	(revision 55e59c47424c43fc926e9eef54257618362654da)
+++ /dev/null	(revision 55e59c47424c43fc926e9eef54257618362654da)
@@ -1,85 +0,0 @@
-# Lab 2: Containerization - Docker
-
-## Overview
-
-In this lab assignment, you will learn to containerize applications using Docker, while focusing on best practices. Additionally, you will explore Docker multi-stage builds. Follow the tasks below to complete the lab assignment.
-
-## Task 1: Dockerize Your Application
-
-**6 Points:**
-
-1. Create a `Dockerfile`:
-   - Inside the `app_python` folder, craft a `Dockerfile` for your application.
-   - Research and implement Docker best practices. Utilize a Dockerfile linter for quality assurance.
-
-2. Build and Test Docker Image:
-   - Build a Docker image using your Dockerfile.
-   - Thoroughly test the image to ensure it functions correctly.
-
-3. Push Image to Docker Hub:
-   - If you lack a public Docker Hub account, create one.
-   - Push your Docker image to your public Docker Hub account.
-
-4. Run and Verify Docker Image:
-   - Retrieve the Docker image from your Docker Hub account.
-   - Execute the image and validate its functionality.
-
-## Task 2: Docker Best Practices
-
-**4 Points:**
-
-1. Enhance your docker image by implementing [Docker Best Practices](https://docs.docker.com/build/building/best-practices/).
-   - No root user inside, or you will get no points at all.
-
-2. Write `DOCKER.md`:
-   - Inside the `app_python` folder, create a `DOCKER.md` file.
-   - Elaborate on the best practices you employed within your Dockerfile.
-   - Implementing and listing numerous Docker best practices will earn you more points.
-
-3. Enhance the README.md:
-   - Update the `README.md` file in the `app_python` folder.
-   - Include a dedicated `Docker` section, explaining your containerized application and providing clear instructions for execution.
-     - How to build?
-     - How to pull?
-     - How to run?
-
-### List of Requirements
-
-- Rootless container.
-- Use COPY, but only specific files.
-- Layer sanity.
-- Use `.dockerignore`.
-- Use a precise version of your base image and language, example `python:3-alpine3.15`.
-
-## Bonus Task: Multi-Stage Builds Exploration
-
-**2.5 Points:**
-
-1. Dockerize Previous App:
-   - Craft a `Dockerfile` for the application from the prior lab.
-   - Place this Dockerfile within the corresponding `app_*` folder.
-
-2. Follow Main Task Guidelines:
-   - Apply the same steps and suggestions as in the primary Dockerization task.
-
-3. Study Docker Multi-Stage Builds:
-   - Familiarize yourself with Docker multi-stage builds.
-   - Consider implementing multi-stage builds, only if they enhance your project's structure and efficiency.
-
-4. Study Distroless Images:
-   - Explore how to use Distroless images by reviewing the official documentation: [GoogleContainerTools/distroless](https://github.com/GoogleContainerTools/distroless).
-   - Create new `distroless.Dockerfile` files for your Python app and your second app.
-   - Use the `nonroot` tag for both images to ensure they run with non-root privileges.
-   - Verify that the applications work correctly with the Distroless images.
-   - Compare the sizes of your previous Docker images with the new Distroless-based images.
-   - In the `DOCKER.md` file, describe the differences between the Distroless images and your previous images. Explain why these differences exist (e.g., smaller size, reduced attack surface, etc.).
-   - Include a screenshot of your final results (e.g., image sizes).
-   - Add a new section to the `README.md` file titled "Distroless Image Version".
-
-### Guidelines
-
-- Utilize appropriate Markdown formatting and structure for all documentation.
-- Organize files within the lab folder with suitable naming conventions.
-- Create pull requests (PRs) as needed: from your fork to the main branch of this repository, and from your fork's branch to your fork's master branch.
-
-> Note: Utilize Docker to containerize your application, adhering to best practices. Explore Docker multi-stage builds for a deeper understanding, and document your process using Markdown.
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1738246464188)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1738246464188)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1738246464189)
+++ b/.idea/vcs.xml	(date 1738246464189)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1738246464173)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1738246464173)
@@ -0,0 +1,68 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="41">
+            <item index="0" class="java.lang.String" itemvalue="referencing" />
+            <item index="1" class="java.lang.String" itemvalue="protobuf" />
+            <item index="2" class="java.lang.String" itemvalue="pydeck" />
+            <item index="3" class="java.lang.String" itemvalue="smmap" />
+            <item index="4" class="java.lang.String" itemvalue="python-dateutil" />
+            <item index="5" class="java.lang.String" itemvalue="numpy" />
+            <item index="6" class="java.lang.String" itemvalue="requests" />
+            <item index="7" class="java.lang.String" itemvalue="gitdb" />
+            <item index="8" class="java.lang.String" itemvalue="st-star-rating" />
+            <item index="9" class="java.lang.String" itemvalue="markupsafe" />
+            <item index="10" class="java.lang.String" itemvalue="markdown-it-py" />
+            <item index="11" class="java.lang.String" itemvalue="jsonschema-specifications" />
+            <item index="12" class="java.lang.String" itemvalue="rpds-py" />
+            <item index="13" class="java.lang.String" itemvalue="mdurl" />
+            <item index="14" class="java.lang.String" itemvalue="certifi" />
+            <item index="15" class="java.lang.String" itemvalue="tenacity" />
+            <item index="16" class="java.lang.String" itemvalue="urllib3" />
+            <item index="17" class="java.lang.String" itemvalue="gitpython" />
+            <item index="18" class="java.lang.String" itemvalue="jsonschema" />
+            <item index="19" class="java.lang.String" itemvalue="pygments" />
+            <item index="20" class="java.lang.String" itemvalue="blinker" />
+            <item index="21" class="java.lang.String" itemvalue="pyarrow" />
+            <item index="22" class="java.lang.String" itemvalue="six" />
+            <item index="23" class="java.lang.String" itemvalue="tornado" />
+            <item index="24" class="java.lang.String" itemvalue="streamlit" />
+            <item index="25" class="java.lang.String" itemvalue="tzdata" />
+            <item index="26" class="java.lang.String" itemvalue="rich" />
+            <item index="27" class="java.lang.String" itemvalue="packaging" />
+            <item index="28" class="java.lang.String" itemvalue="typing-extensions" />
+            <item index="29" class="java.lang.String" itemvalue="toml" />
+            <item index="30" class="java.lang.String" itemvalue="click" />
+            <item index="31" class="java.lang.String" itemvalue="attrs" />
+            <item index="32" class="java.lang.String" itemvalue="altair" />
+            <item index="33" class="java.lang.String" itemvalue="jinja2" />
+            <item index="34" class="java.lang.String" itemvalue="pandas" />
+            <item index="35" class="java.lang.String" itemvalue="toolz" />
+            <item index="36" class="java.lang.String" itemvalue="charset-normalizer" />
+            <item index="37" class="java.lang.String" itemvalue="cachetools" />
+            <item index="38" class="java.lang.String" itemvalue="pillow" />
+            <item index="39" class="java.lang.String" itemvalue="pytz" />
+            <item index="40" class="java.lang.String" itemvalue="idna" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPep8NamingInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="ignoredErrors">
+        <list>
+          <option value="N803" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredIdentifiers">
+        <list>
+          <option value="dict.*" />
+        </list>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/S25-core-course-labs.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/S25-core-course-labs.iml b/.idea/S25-core-course-labs.iml
new file mode 100644
--- /dev/null	(date 1738246464187)
+++ b/.idea/S25-core-course-labs.iml	(date 1738246464187)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1738246464188)
+++ b/.idea/modules.xml	(date 1738246464188)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/S25-core-course-labs.iml" filepath="$PROJECT_DIR$/.idea/S25-core-course-labs.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1738246464188)
+++ b/.idea/misc.xml	(date 1738246464188)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Poetry (frontend)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
