# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

defaults:
  run:
    working-directory: ./app_python

permissions:
  contents: read
  security-events: write # Required for security scanning
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Add timeout to prevent hanging jobs

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better versioning

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: 'pip'  # Enable pip caching

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Snyk to check for Python vulnerabilities
      uses: snyk/actions/python@master
      continue-on-error: true  # Don't fail the build for vulnerabilities
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor
        args: --project-name=python-app --file=app_python/requirements.txt
        working-directory: app_python
        
    - name: Security scan with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-results.json || true

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest and coverage
      run: |
        pytest --cov=. --cov-report=xml

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./app_python
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: favelanky/app_python:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      continue-on-error: true  # Don't fail the build for vulnerabilities
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: favelanky/app_python:latest
        args: --file=app_python/Dockerfile --app-vulns --skip-unresolved app_python/
        working-directory: app_python

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

