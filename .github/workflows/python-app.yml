name: Python Application CI

on:
  push:
    paths:
      - "app_python/**"
  pull_request:
    paths:
      - "app_python/**"

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          cd app_python
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          cd app_python
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          cd app_python
          python -m pytest test_app.py -v

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=app_python/requirements.txt --package-manager=pip --skip-unresolved --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload Snyk result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  build:
    runs-on: ubuntu-latest
    needs: analyze

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push standard Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app_python
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/python-app:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/python-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/python-app:buildcache,mode=max

      - name: Build and push distroless Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app_python
          file: ./app_python/distroless.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/python-app:distroless
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/python-app:distroless-buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/python-app:distroless-buildcache,mode=max
