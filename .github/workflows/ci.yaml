# This workflow will install Python dependencies, run tests and lint with a single version of Python


name: Python application

on:
  push:
    paths:
      - "app_python/**"
  pull_request:
    paths:
      - "app_python/**"
      - ".github/workflows/ci-python.yaml"
  workflow_dispatch:


permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    # Set working dir to app_python
    defaults:
      run:
        working-directory: ./app_python

    steps:
      # S1: Checkout the repo code into the runner workspace
      - uses: actions/checkout@v4

      # S2: Set Python3.10 for the environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # S3: Cache pip dependencies to reduce build time
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # S4: Install dependencies and testing tools
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # S5: Lint the code using flake8
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # S6: Run unit tests with pytest
      - name: Test with pytest
        run: pytest

      # S7: Log into DockerHub using secrets
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # S8: Build Docker image using Dockerfile in repo
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/msk-time-app:latest .

      # S9: Push the Docker image to my DockerHub repo
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/msk-time-app:latest
      # S10: Run Snyk to scan for vulnerabilities in my project
      - name: Run Snyk Vulnerability Test
        uses: snyk/actions@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test --all-projects
