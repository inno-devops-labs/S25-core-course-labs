name: 🏗️ CI Workflow

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'app_python/**'  # 🎯 Run only if changes occur in app_python/
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app_python/

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🏎️ Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
          cache: "pip"  # Native caching for Python dependencies

      - name: 📦 Install dependencies
        run: pip install .  # Install from pyproject.toml

      - name: 🔍 Run Ruff Linter
        uses: astral-sh/ruff-action@v3
        with:
          args: "check ."  # Linting without fixing

      - name: 🎨 Run Ruff Formatter
        uses: astral-sh/ruff-action@v3
        with:
          args: "format --check"  # Ensure code is correctly formatted

      - name: 🧪 Run Tests with Pytest
        uses: pavelzw/pytest-action@v2
        with:
          verbose: true
          emoji: true  # 🏆 Enable emojis in test output
          job-summary: true
          custom-arguments: '-q'
          click-to-expand: true
          report-title: '📝 Test Report'

  docker:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: app_python/

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📤 Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/moscow-time-webapp

      - name: 🛠️ Build & Push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: app_python/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
      contents: write
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔍 Run Snyk Security Scan
        uses: snyk/actions/python@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test --sarif-file-output=snyk.sarif ./app_python

      - name: 📤 Upload Snyk SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif