name: Python CI/CD Pipeline

on:
  push:
    branches:
      - lab3
    paths:
      - "app_python/**"
  pull_request:
    branches:
      - lab3
    paths:
      - "app_python/**"

jobs:
  build-and-test-python:
    name: Build and Test Python Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
          cache: 'pip'

      - name: Install Dependencies
        run: |
          cd app_python
          pip install -r requirements.txt

      - name: Run Linter
        run: |
          cd app_python
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Tests
        run: |
          cd app_python
          pytest

  security-check-python:
    name: Security Vulnerability Check for Python
    runs-on: ubuntu-latest
    needs: build-and-test-python

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Python Dependencies
        run: |
          cd app_python
          pip install -r requirements.txt

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk Security Scan
        run: |
          cd app_python
          snyk test --all-projects --detection-depth=4
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker-python:
    name: Build and Push Python Docker Image
    runs-on: ubuntu-latest
    needs: security-check-python

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Python Docker Image
        run: |
          cd app_python
          docker build --cache-from ${{ secrets.DOCKER_USERNAME }}/fastapi-mt:latest -t ${{ secrets.DOCKER_USERNAME }}/fastapi-mt:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-mt:latest

      - name: Build and Push Distroless Python Docker Image
        run: |
          cd app_python
          docker build --cache-from ${{ secrets.DOCKER_USERNAME }}/fastapi-mt:distroless -t ${{ secrets.DOCKER_USERNAME }}/fastapi-mt:distroless -f distroless.Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-mt:distroless