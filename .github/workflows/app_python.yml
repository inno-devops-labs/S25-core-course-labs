name: Python Application Lint & Test & Push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  pull_request:
    paths:
      - app_python/**
      - .github/workflows/app_python.yml
    branches:
      - main
      - master

jobs:
  lint-test-snyk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: app_python/requirements.txt

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r app_python/requirements.txt
          pip install flake8

      - name: Lint
        uses: py-actions/flake8@v2
        with:
          ignore: "F401"
          max-line-length: "128"
          path: "app_python/app"

      - name: Test
        run: |
          cd app_python
          python -m unittest discover -s tests -p "*.py"

      - name: Snyk Test
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --skip-unresolved --sarif-file-output=app_python/snyk.sarif --file=requirements.txt --severity-threshold=high app_python/

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: app_python/snyk.sarif

  build-push:
    runs-on: ubuntu-latest
    needs:
      - lint-test-snyk

    permissions:
      contents: read
      packages: write
      security-events: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert IMAGE_NAME to lowercase
        shell: bash
        run: |
          echo "LOWER_IMAGE_NAME=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.LOWER_IMAGE_NAME }}/app_python

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: app_python
          file: ./app_python/distroless.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.LOWER_IMAGE_NAME }}/app_python_buildcache:latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.LOWER_IMAGE_NAME }}/app_python_buildcache:latest,mode=max


