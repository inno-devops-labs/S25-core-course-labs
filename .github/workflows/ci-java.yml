name: ci for java

on:
  push:
    paths:
      - 'app_java/**'
  pull_request:
    paths:
      - 'app_java/**'

jobs:
  build-lint-test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Dependencies
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('app_java/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Make mvnw Executable
      - name: Make mvnw Executable
        run: chmod +x ./app_java/mvnw

      # Step 5: Test mvnw Script
      - name: Test mvnw Script
        working-directory: ./app_java
        run: ./mvnw --version

      # Step 6: Build the Project
      - name: Build with Maven
        working-directory: ./app_java
        run: ./mvnw clean install -DskipTests

      # Step 7: Lint Code (Optional: Use Checkstyle or Spotless)
      - name: Lint Code
        working-directory: ./app_java
        run: ./mvnw checkstyle:check

      # Step 8: Run Tests
      - name: Run Tests
        working-directory: ./app_java
        run: ./mvnw test

      # Step 9: Run Snyk to check for vulnerabilities
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=./app_java/pom.xml --skip-unresolved --severity-threshold=high

  docker-worker:
    needs: [build-lint-test]
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build Docker Image
      - name: Build Docker Image
        working-directory: ./app_java
        run: |
          docker build -t nickwidbestie/random-color-picker:$GITHUB_SHA -f Dockerfile .

      # Step 4: Push Docker Image
      - name: Push Docker Image
        run: |
          docker push nickwidbestie/random-color-picker:$GITHUB_SHA