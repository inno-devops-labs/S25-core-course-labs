version: "3.8"

networks:
  monitoring:

volumes:
  loki_vol:

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "200k"
    max-file: "10"

x-resources: &default-resources
  limits:
    memory: "512m"
  reservations:
    memory: "256m"

services:
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_vol:/loki
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources: *default-resources

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/log:/var/log
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9080/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging: *default-logging
    deploy:
      resources: *default-resources

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./grafana-provisioning:/etc/grafana/provisioning
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 0
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 0
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 0
          editable: false
        EOF
        /run.sh
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources: *default-resources
  
  app:
    image: ilsiia/app-python:latest
    container_name: app_python_1
    ports:
      - "5001:5000"
    networks:
      - monitoring
    restart: always
    volumes:
      - ./app-python-data:/app_python/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources: *default-resources

  app2:
    image: ilsiia/app_nodejs:latest
    container_name: app_nodejs_2
    ports:
      - "3001:3001"
    networks:
      - monitoring
    restart: always
    volumes:
      - ./app-nodejs-data:/nodejs/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources: *default-resources
    
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources: *default-resources

